// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider      = "prisma-client-js"
  output        = "../lib/generated/prisma"
  binaryTargets = ["native", "linux-musl-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Animal {
  id               String    @id @default(cuid())
  name             String
  tag              String
  breed            String
  gender           String
  birthDate        DateTime
  status           String
  reproductiveStatus String?  // Não gestante, Inseminada, Gestante, Parto, Aborto
  inseminationDate  DateTime?
  expectedBirthDate DateTime?
  abortionDate      DateTime?
  weight           Float?
  notes            String?
  purchaseDate     DateTime?
  purchaseValue    Float?
  active           Boolean   @default(true)
  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @updatedAt

  // Relations
  farmId       String
  farm         Farm          @relation(fields: [farmId], references: [id])
  motherOf     Birth[]       @relation("Mother")
  fatherOf     Birth[]       @relation("Father")
  childOf      Birth?        @relation("Child")
  transactions Transaction[]
  events       EventAnimal[]
  Birth        Birth[]
  lote         Lote?         @relation(fields: [loteId], references: [id])
  loteId       String?

  @@unique([tag, farmId])
}

model Birth {
  id        String   @id @default(cuid())
  birthDate DateTime
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  motherId String
  mother   Animal  @relation("Mother", fields: [motherId], references: [id])
  fatherId String
  father   Animal  @relation("Father", fields: [fatherId], references: [id])
  childId  String  @unique
  child    Animal  @relation("Child", fields: [childId], references: [id])
  Animal   Animal? @relation(fields: [animalId], references: [id])
  animalId String?
}

model Transaction {
  id        String   @id @default(cuid())
  type      String // "Compra" or "Venda"
  date      DateTime
  value     Float
  person    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  farmId   String
  farm     Farm   @relation(fields: [farmId], references: [id])
  animalId String
  animal   Animal @relation(fields: [animalId], references: [id])
}

model Event {
  id          String   @id @default(cuid())
  title       String
  type        String // "Manejo Sanitário", "Manejo Reprodutivo", "Pesagem"
  date        DateTime
  description String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  farmId   String
  farm     Farm         @relation(fields: [farmId], references: [id])
  animals  EventAnimal[]
}

model EventAnimal {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  eventId  String
  event    Event  @relation(fields: [eventId], references: [id], onDelete: Cascade)
  animalId String
  animal   Animal @relation(fields: [animalId], references: [id], onDelete: Cascade)

  @@unique([eventId, animalId])
}

model Lote {
  id         String   @id @default(cuid())
  nome       String
  descricao  String?
  finalidade String // "Cria", "Recria", "Engorda", "Leite"
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  // Relations
  farmId   String
  farm     Farm     @relation(fields: [farmId], references: [id])
  animais  Animal[]
}

model Farm {
  id        String   @id @default(cuid())
  name      String
  address   String?
  phone     String?
  active    Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  users       User[]
  animals     Animal[]
  lotes       Lote[]
  events      Event[]
  transactions Transaction[]
}

model User {
  id        String   @id @default(cuid())
  username  String   @unique
  email     String   @unique
  password  String
  fullName  String
  role      String   // ADMIN, OWNER, EMPLOYEE
  active    Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  farmId    String?
  farm      Farm?    @relation(fields: [farmId], references: [id])
}
